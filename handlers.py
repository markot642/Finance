from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from database import Database
from analytics import Analytics
from config import EXPENSE_CATEGORIES, INCOME_CATEGORIES, ACHIEVEMENTS, FINANCIAL_TIPS
import random
from datetime import datetime

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
CHOOSING_CATEGORY, ENTERING_AMOUNT, ENTERING_DESCRIPTION, CHOOSING_GOAL_TYPE, ENTERING_GOAL_AMOUNT = range(5)

class BotHandlers:
    def __init__(self, db: Database, analytics: Analytics):
        self.db = db
        self.analytics = analytics
        self.user_states = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        self.db.add_user(user.id, user.username, user.first_name)
        
        welcome_text = f"""
üéâ –ü—Ä–∏–≤–µ—Ç, {user.first_name}! 

–Ø —Ç–≤–æ–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤ –∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤! üí∞

–ß—Ç–æ —è —É–º–µ—é:
‚úÖ –£—á–∏—Ç—ã–≤–∞—Ç—å –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã
‚úÖ –î–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏  
‚úÖ –ü–æ–º–æ–≥–∞—Ç—å —Å—Ç–∞–≤–∏—Ç—å –∏ –¥–æ—Å—Ç–∏–≥–∞—Ç—å —Ü–µ–ª–∏
‚úÖ –ú–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏—é
‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∏ –≥—Ä–∞—Ñ–∏–∫–∏

–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:
        """
        
        keyboard = [
            [InlineKeyboardButton("üí∞ –î–æ—Ö–æ–¥", callback_data="income")],
            [InlineKeyboardButton("üí∏ –†–∞—Å—Ö–æ–¥", callback_data="expense")],
            [InlineKeyboardButton("üìä –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
            [InlineKeyboardButton("üéØ –¶–µ–ª–∏", callback_data="goals")],
            [InlineKeyboardButton("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="achievements")],
            [InlineKeyboardButton("üí° –°–æ–≤–µ—Ç—ã", callback_data="tips")],
            [InlineKeyboardButton("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="analytics")],
            [InlineKeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—è", callback_data="history")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "income":
            await self.show_income_categories(query)
        elif query.data == "expense":
            await self.show_expense_categories(query)
        elif query.data == "balance":
            await self.show_balance(query)
        elif query.data == "goals":
            await self.show_goals(query)
        elif query.data == "achievements":
            await self.show_achievements(query)
        elif query.data == "tips":
            await self.show_tips(query)
        elif query.data == "analytics":
            await self.show_analytics_menu(query)
        elif query.data == "history":
            await self.show_history(query)
        elif query.data.startswith("category_"):
            await self.handle_category_selection(query)
        elif query.data.startswith("analytics_"):
            await self.handle_analytics_selection(query)
        elif query.data == "add_goal":
            await self.start_add_goal(query)
        elif query.data == "back_to_main":
            await self.show_main_menu(query)
    
    async def show_income_categories(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤"""
        keyboard = []
        for category in INCOME_CATEGORIES:
            keyboard.append([InlineKeyboardButton(category, callback_data=f"category_income_{category}")])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞:", reply_markup=reply_markup)
    
    async def show_expense_categories(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤"""
        keyboard = []
        for category in EXPENSE_CATEGORIES:
            keyboard.append([InlineKeyboardButton(category, callback_data=f"category_expense_{category}")])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:", reply_markup=reply_markup)
    
    async def handle_category_selection(self, query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        parts = query.data.split("_", 2)
        transaction_type = parts[1]
        category = parts[2]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_states[query.from_user.id] = {
            'transaction_type': transaction_type,
            'category': category
        }
        
        await query.edit_message_text(
            f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É ({'–¥–æ—Ö–æ–¥–∞' if transaction_type == 'income' else '—Ä–∞—Å—Ö–æ–¥–∞'}):\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="back_to_main")]])
        )
        
        return ENTERING_AMOUNT
    
    async def handle_amount_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã"""
        try:
            amount = float(update.message.text.replace(',', '.'))
            if amount <= 0:
                await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è!")
                return ENTERING_AMOUNT
            
            user_id = update.effective_user.id
            if user_id not in self.user_states:
                await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return ConversationHandler.END
            
            state = self.user_states[user_id]
            state['amount'] = amount
            
            await update.message.reply_text(
                f"–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:\n"
                f"–°—É–º–º–∞: {amount} —Ä—É–±.\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {state['category']}"
            )
            
            return ENTERING_DESCRIPTION
            
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É!")
            return ENTERING_AMOUNT
    
    async def handle_description_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
        description = update.message.text
        user_id = update.effective_user.id
        state = self.user_states[user_id]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        self.db.add_transaction(
            user_id=user_id,
            amount=state['amount'],
            category=state['category'],
            description=description,
            transaction_type=state['transaction_type']
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        await self.check_achievements(user_id, state['amount'], state['transaction_type'])
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        del self.user_states[user_id]
        
        emoji = "üí∞" if state['transaction_type'] == 'income' else "üí∏"
        await update.message.reply_text(
            f"{emoji} –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n"
            f"–°—É–º–º–∞: {state['amount']} —Ä—É–±.\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {state['category']}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]])
        )
        
        return ConversationHandler.END
    
    async def show_balance(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = query.from_user.id
        balance = self.db.get_user_balance(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        transactions = self.db.get_transactions(user_id, 5)
        
        balance_text = f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} —Ä—É–±.\n\n"
        
        if transactions:
            balance_text += "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:\n"
            for trans in transactions:
                emoji = "üí∞" if trans['type'] == 'income' else "üí∏"
                date = trans['date'][:10]  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É
                balance_text += f"{emoji} {trans['amount']} —Ä—É–±. - {trans['category']} ({date})\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(balance_text, reply_markup=reply_markup)
    
    async def show_goals(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ü–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = query.from_user.id
        goals = self.db.get_user_goals(user_id)
        
        if not goals:
            goals_text = "üéØ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ü–µ–ª–µ–π.\n\n–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é —Ü–µ–ª—å!"
            keyboard = [
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å", callback_data="add_goal")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]
        else:
            goals_text = "üéØ –í–∞—à–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏:\n\n"
            for goal in goals:
                status = "‚úÖ" if goal['is_completed'] else "‚è≥"
                progress = (goal['current_amount'] / goal['target_amount']) * 100
                goals_text += f"{status} {goal['title']}\n"
                goals_text += f"   –ü—Ä–æ–≥—Ä–µ—Å—Å: {goal['current_amount']:.2f}/{goal['target_amount']:.2f} —Ä—É–±. ({progress:.1f}%)\n\n"
            
            keyboard = [
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å", callback_data="add_goal")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(goals_text, reply_markup=reply_markup)
    
    async def start_add_goal(self, query):
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–µ–ª–∏"""
        keyboard = [
            [InlineKeyboardButton("üí∞ –ù–∞–∫–æ–ø–∏—Ç—å —Å—É–º–º—É", callback_data="goal_type_save")],
            [InlineKeyboardButton("üí∏ –ù–µ —Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="goal_type_spend")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="goals")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ü–µ–ª–∏:", reply_markup=reply_markup)
    
    async def show_achievements(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = query.from_user.id
        user_achievements = self.db.get_user_achievements(user_id)
        points = self.db.get_user_points(user_id)
        
        achievements_text = f"üèÜ –í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n\n"
        achievements_text += f"üíé –û—á–∫–∏: {points}\n\n"
        
        if user_achievements:
            achievements_text += "–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n"
            for achievement_id in user_achievements:
                if achievement_id in ACHIEVEMENTS:
                    achievement = ACHIEVEMENTS[achievement_id]
                    achievements_text += f"‚úÖ {achievement['name']}\n"
                    achievements_text += f"   {achievement['description']}\n\n"
        else:
            achievements_text += "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —ç–∫–æ–Ω–æ–º–∏—Ç—å! üí™\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        achievements_text += "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n"
        for achievement_id, achievement in ACHIEVEMENTS.items():
            status = "‚úÖ" if achievement_id in user_achievements else "üîí"
            achievements_text += f"{status} {achievement['name']} (+{achievement['points']} –æ—á–∫–æ–≤)\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(achievements_text, reply_markup=reply_markup)
    
    async def show_tips(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Å–æ–≤–µ—Ç—ã"""
        tip = random.choice(FINANCIAL_TIPS)
        
        tips_text = f"üí° –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å–æ–≤–µ—Ç –¥–Ω—è:\n\n{tip}\n\n"
        tips_text += "üí° –î—Ä—É–≥–∏–µ –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã:\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–µ—Ç–æ–≤
        other_tips = [t for t in FINANCIAL_TIPS if t != tip][:3]
        for i, tip in enumerate(other_tips, 1):
            tips_text += f"{i}. {tip}\n"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –î—Ä—É–≥–æ–π —Å–æ–≤–µ—Ç", callback_data="tips")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(tips_text, reply_markup=reply_markup)
    
    async def show_analytics_menu(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        keyboard = [
            [InlineKeyboardButton("üìä –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="analytics_expenses")],
            [InlineKeyboardButton("üìà –î–æ—Ö–æ–¥—ã vs –†–∞—Å—Ö–æ–¥—ã", callback_data="analytics_income_vs_expense")],
            [InlineKeyboardButton("üéØ –ü—Ä–æ–≥—Ä–µ—Å—Å —Ü–µ–ª–µ–π", callback_data="analytics_goals")],
            [InlineKeyboardButton("üìä –ú–µ—Å—è—á–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã", callback_data="analytics_trends")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:", reply_markup=reply_markup)
    
    async def handle_analytics_selection(self, query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        user_id = query.from_user.id
        analytics_type = query.data.split("_", 1)[1]
        
        await query.edit_message_text("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫...")
        
        try:
            if analytics_type == "expenses":
                chart_bytes = self.analytics.create_expense_pie_chart(user_id)
                caption = "üìä –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π"
            elif analytics_type == "income_vs_expense":
                chart_bytes = self.analytics.create_income_vs_expense_chart(user_id)
                caption = "üìà –î–æ—Ö–æ–¥—ã vs –†–∞—Å—Ö–æ–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π"
            elif analytics_type == "goals":
                chart_bytes = self.analytics.create_savings_progress_chart(user_id)
                caption = "üéØ –ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π"
            elif analytics_type == "trends":
                chart_bytes = self.analytics.create_monthly_trend_chart(user_id)
                caption = "üìä –ú–µ—Å—è—á–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤"
            else:
                await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
                return
            
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="analytics")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await context.bot.send_photo(
                chat_id=query.from_user.id,
                photo=chart_bytes,
                caption=caption,
                reply_markup=reply_markup
            )
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫..."
            await query.delete()
            
        except Exception as e:
            await query.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}")
    
    async def show_history(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        user_id = query.from_user.id
        transactions = self.db.get_transactions(user_id, 10)
        
        if not transactions:
            history_text = "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.\n\n–ù–∞—á–Ω–∏—Ç–µ –≤–µ—Å—Ç–∏ —É—á–µ—Ç —Å–≤–æ–∏—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤!"
        else:
            history_text = "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:\n\n"
            for i, trans in enumerate(transactions, 1):
                emoji = "üí∞" if trans['type'] == 'income' else "üí∏"
                date = trans['date'][:10]
                history_text += f"{i}. {emoji} {trans['amount']} —Ä—É–±.\n"
                history_text += f"   {trans['category']}\n"
                history_text += f"   {trans['description']}\n"
                history_text += f"   {date}\n\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(history_text, reply_markup=reply_markup)
    
    async def show_main_menu(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [
            [InlineKeyboardButton("üí∞ –î–æ—Ö–æ–¥", callback_data="income")],
            [InlineKeyboardButton("üí∏ –†–∞—Å—Ö–æ–¥", callback_data="expense")],
            [InlineKeyboardButton("üìä –ë–∞–ª–∞–Ω—Å", callback_data="balance")],
            [InlineKeyboardButton("üéØ –¶–µ–ª–∏", callback_data="goals")],
            [InlineKeyboardButton("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="achievements")],
            [InlineKeyboardButton("üí° –°–æ–≤–µ—Ç—ã", callback_data="tips")],
            [InlineKeyboardButton("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", callback_data="analytics")],
            [InlineKeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—è", callback_data="history")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    
    async def check_achievements(self, user_id: int, amount: float, transaction_type: str):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã–¥–∞—á–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
        balance = self.db.get_user_balance(user_id)
        transactions = self.db.get_transactions(user_id, 1000)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        achievements_to_check = []
        
        # –ü–µ—Ä–≤–∞—è —ç–∫–æ–Ω–æ–º–∏—è
        if transaction_type == 'income' and balance > 0:
            achievements_to_check.append('first_save')
        
        # –ë–æ–ª—å—à–æ–π –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å
        if balance >= 1000:
            achievements_to_check.append('big_saver')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–¥–µ–ª—å–Ω—É—é —ç–∫–æ–Ω–æ–º–∏—é (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
        if len(transactions) >= 7:
            achievements_to_check.append('week_saver')
        
        # –í—ã–¥–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        for achievement_id in achievements_to_check:
            self.db.add_achievement(user_id, achievement_id)
            if achievement_id in ACHIEVEMENTS:
                achievement = ACHIEVEMENTS[achievement_id]
                self.db.update_user_points(user_id, achievement['points'])
    
    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        user_id = update.effective_user.id
        if user_id in self.user_states:
            del self.user_states[user_id]
        
        await update.message.reply_text(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]])
        )
        
        return ConversationHandler.END 