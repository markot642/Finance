#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –±–æ—Ç–∞
"""

import asyncio
import sqlite3
from database import Database
from analytics import Analytics
from config import EXPENSE_CATEGORIES, INCOME_CATEGORIES, ACHIEVEMENTS

async def test_database():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    db = Database()
    
    # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    test_user_id = 12345
    db.add_user(test_user_id, "test_user", "Test User")
    print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω")
    
    # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    db.add_transaction(test_user_id, 1000, "üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞", "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞", "income")
    db.add_transaction(test_user_id, 500, "üçî –ï–¥–∞ –∏ —Ñ–∞—Å—Ç—Ñ—É–¥", "–û–±–µ–¥", "expense")
    db.add_transaction(test_user_id, 200, "üöå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–ü—Ä–æ–µ–∑–¥", "expense")
    print("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    balance = db.get_user_balance(test_user_id)
    print(f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance} —Ä—É–±.")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    transactions = db.get_transactions(test_user_id, 5)
    print(f"üìã –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(transactions)}")
    
    # –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–µ–ª–∏
    db.add_goal(test_user_id, "–ù–∞–∫–æ–ø–∏—Ç—å –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω", 5000, "save")
    goals = db.get_user_goals(test_user_id)
    print(f"üéØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–ª–µ–π: {len(goals)}")
    
    # –¢–µ—Å—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    db.add_achievement(test_user_id, "first_save")
    achievements = db.get_user_achievements(test_user_id)
    print(f"üèÜ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {len(achievements)}")
    
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–π–¥–µ–Ω—ã!\n")

async def test_analytics():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    print("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...")
    
    db = Database()
    analytics = Analytics(db)
    
    test_user_id = 12345
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    categories = ["üçî –ï–¥–∞ –∏ —Ñ–∞—Å—Ç—Ñ—É–¥", "üöå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "üìö –£—á–µ–±–∞"]
    amounts = [300, 150, 200, 500]
    
    for category, amount in zip(categories, amounts):
        db.add_transaction(test_user_id, amount, category, f"–¢–µ—Å—Ç–æ–≤–∞—è —Ç—Ä–∞—Ç–∞ –Ω–∞ {category}", "expense")
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    try:
        expense_chart = analytics.create_expense_pie_chart(test_user_id)
        print("‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å—Ö–æ–¥–æ–≤ —Å–æ–∑–¥–∞–Ω")
        
        income_vs_expense_chart = analytics.create_income_vs_expense_chart(test_user_id)
        print("‚úÖ –ì—Ä–∞—Ñ–∏–∫ –¥–æ—Ö–æ–¥–æ–≤ vs —Ä–∞—Å—Ö–æ–¥–æ–≤ —Å–æ–∑–¥–∞–Ω")
        
        savings_chart = analytics.create_savings_progress_chart(test_user_id)
        print("‚úÖ –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω")
        
        trends_chart = analytics.create_monthly_trend_chart(test_user_id)
        print("‚úÖ –ì—Ä–∞—Ñ–∏–∫ –º–µ—Å—è—á–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤ —Å–æ–∑–¥–∞–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}")
    
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!\n")

async def test_config():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("‚öôÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    print(f"üìä –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤: {len(EXPENSE_CATEGORIES)}")
    print(f"üí∞ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤: {len(INCOME_CATEGORIES)}")
    print(f"üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: {len(ACHIEVEMENTS)}")
    
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!\n")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –±–æ—Ç–∞...\n")
    
    await test_config()
    await test_database()
    await test_analytics()
    
    print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    print("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")

if __name__ == "__main__":
    asyncio.run(main()) 