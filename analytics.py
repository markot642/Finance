import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from typing import List, Dict, Tuple
import io
from database import Database
from config import EXPENSE_CATEGORIES, INCOME_CATEGORIES

class Analytics:
    def __init__(self, db: Database):
        self.db = db
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        plt.style.use('seaborn-v0_8')
        sns.set_palette("husl")
    
    def create_expense_pie_chart(self, user_id: int, days: int = 30) -> bytes:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã —Ä–∞—Å—Ö–æ–¥–æ–≤"""
        expenses = self.db.get_expenses_by_category(user_id, days)
        
        if not expenses:
            return self._create_empty_chart("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö")
        
        categories, amounts = zip(*expenses)
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        fig, ax = plt.subplots(figsize=(10, 8))
        colors = plt.cm.Set3(np.linspace(0, 1, len(categories)))
        
        wedges, texts, autotexts = ax.pie(amounts, labels=categories, autopct='%1.1f%%',
                                          colors=colors, startangle=90)
        
        ax.set_title(f'–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–∑–∞ {days} –¥–Ω–µ–π)', fontsize=16, fontweight='bold')
        
        # –£–ª—É—á—à–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        for text in texts:
            text.set_fontsize(10)
        for autotext in autotexts:
            autotext.set_fontsize(9)
            autotext.set_color('white')
            autotext.set_fontweight('bold')
        
        plt.tight_layout()
        
        return self._save_chart_to_bytes()
    
    def create_income_vs_expense_chart(self, user_id: int, days: int = 30) -> bytes:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–æ—Ö–æ–¥–æ–≤ vs —Ä–∞—Å—Ö–æ–¥–æ–≤"""
        transactions = self.db.get_transactions(user_id, 1000)  # –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        
        if not transactions:
            return self._create_empty_chart("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
        cutoff_date = datetime.now() - timedelta(days=days)
        filtered_transactions = []
        
        for trans in transactions:
            trans_date = datetime.strptime(trans['date'], '%Y-%m-%d %H:%M:%S')
            if trans_date >= cutoff_date:
                filtered_transactions.append(trans)
        
        if not filtered_transactions:
            return self._create_empty_chart(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
        daily_data = {}
        for trans in filtered_transactions:
            date = trans['date'].split()[0]
            if date not in daily_data:
                daily_data[date] = {'income': 0, 'expense': 0}
            
            if trans['type'] == 'income':
                daily_data[date]['income'] += trans['amount']
            else:
                daily_data[date]['expense'] += trans['amount']
        
        dates = sorted(daily_data.keys())
        incomes = [daily_data[date]['income'] for date in dates]
        expenses = [daily_data[date]['expense'] for date in dates]
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        fig, ax = plt.subplots(figsize=(12, 6))
        
        x = range(len(dates))
        width = 0.35
        
        ax.bar([i - width/2 for i in x], incomes, width, label='–î–æ—Ö–æ–¥—ã', color='green', alpha=0.7)
        ax.bar([i + width/2 for i in x], expenses, width, label='–†–∞—Å—Ö–æ–¥—ã', color='red', alpha=0.7)
        
        ax.set_xlabel('–î–∞—Ç–∞')
        ax.set_ylabel('–°—É–º–º–∞ (—Ä—É–±.)')
        ax.set_title(f'–î–æ—Ö–æ–¥—ã vs –†–∞—Å—Ö–æ–¥—ã (–∑–∞ {days} –¥–Ω–µ–π)', fontsize=16, fontweight='bold')
        ax.legend()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π
        ax.set_xticks(x)
        ax.set_xticklabels([date[5:] for date in dates], rotation=45)
        
        plt.tight_layout()
        
        return self._save_chart_to_bytes()
    
    def create_savings_progress_chart(self, user_id: int) -> bytes:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π"""
        goals = self.db.get_user_goals(user_id)
        
        if not goals:
            return self._create_empty_chart("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ü–µ–ª–µ–π")
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏
        active_goals = [goal for goal in goals if not goal['is_completed']]
        
        if not active_goals:
            return self._create_empty_chart("–í—Å–µ —Ü–µ–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã! üéâ")
        
        goal_names = [goal['title'] for goal in active_goals]
        current_amounts = [goal['current_amount'] for goal in active_goals]
        target_amounts = [goal['target_amount'] for goal in active_goals]
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        fig, ax = plt.subplots(figsize=(12, 8))
        
        x = range(len(goal_names))
        width = 0.35
        
        # –ì—Ä–∞—Ñ–∏–∫ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        bars1 = ax.bar([i - width/2 for i in x], current_amounts, width, 
                      label='–¢–µ–∫—É—â–∏–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è', color='lightblue', alpha=0.8)
        
        # –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–ª–µ–≤–æ–π —Å—É–º–º—ã
        bars2 = ax.bar([i + width/2 for i in x], target_amounts, width, 
                      label='–¶–µ–ª–µ–≤–∞—è —Å—É–º–º–∞', color='orange', alpha=0.6)
        
        ax.set_xlabel('–¶–µ–ª–∏')
        ax.set_ylabel('–°—É–º–º–∞ (—Ä—É–±.)')
        ax.set_title('–ü—Ä–æ–≥—Ä–µ—Å—Å –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π', fontsize=16, fontweight='bold')
        ax.legend()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π
        ax.set_xticks(x)
        ax.set_xticklabels(goal_names, rotation=45, ha='right')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
        for i, (current, target) in enumerate(zip(current_amounts, target_amounts)):
            percentage = (current / target) * 100 if target > 0 else 0
            ax.text(i, current + max(current_amounts) * 0.02, 
                   f'{percentage:.1f}%', ha='center', va='bottom', fontweight='bold')
        
        plt.tight_layout()
        
        return self._save_chart_to_bytes()
    
    def create_monthly_trend_chart(self, user_id: int, months: int = 6) -> bytes:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –º–µ—Å—è—á–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤"""
        transactions = self.db.get_transactions(user_id, 5000)
        
        if not transactions:
            return self._create_empty_chart("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–µ—Å—è—Ü–∞–º
        monthly_data = {}
        for trans in transactions:
            date = datetime.strptime(trans['date'], '%Y-%m-%d %H:%M:%S')
            month_key = f"{date.year}-{date.month:02d}"
            
            if month_key not in monthly_data:
                monthly_data[month_key] = {'income': 0, 'expense': 0}
            
            if trans['type'] == 'income':
                monthly_data[month_key]['income'] += trans['amount']
            else:
                monthly_data[month_key]['expense'] += trans['amount']
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –º–µ—Å—è—Ü–∞–º
        sorted_months = sorted(monthly_data.keys())
        
        if len(sorted_months) < 2:
            return self._create_empty_chart("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤")
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –º–µ—Å—è—Ü–µ–≤
        recent_months = sorted_months[-months:]
        
        incomes = [monthly_data[month]['income'] for month in recent_months]
        expenses = [monthly_data[month]['expense'] for month in recent_months]
        savings = [income - expense for income, expense in zip(incomes, expenses)]
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 10))
        
        x = range(len(recent_months))
        width = 0.35
        
        # –ì—Ä–∞—Ñ–∏–∫ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
        ax1.bar([i - width/2 for i in x], incomes, width, label='–î–æ—Ö–æ–¥—ã', color='green', alpha=0.7)
        ax1.bar([i + width/2 for i in x], expenses, width, label='–†–∞—Å—Ö–æ–¥—ã', color='red', alpha=0.7)
        ax1.set_title('–ú–µ—Å—è—á–Ω—ã–µ –¥–æ—Ö–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥—ã', fontsize=14, fontweight='bold')
        ax1.legend()
        ax1.set_xticks(x)
        ax1.set_xticklabels([month[5:] for month in recent_months])
        
        # –ì—Ä–∞—Ñ–∏–∫ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π
        colors = ['green' if s >= 0 else 'red' for s in savings]
        ax2.bar(x, savings, color=colors, alpha=0.7)
        ax2.set_title('–ú–µ—Å—è—á–Ω—ã–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è', fontsize=14, fontweight='bold')
        ax2.set_xticks(x)
        ax2.set_xticklabels([month[5:] for month in recent_months])
        ax2.axhline(y=0, color='black', linestyle='-', alpha=0.3)
        
        plt.tight_layout()
        
        return self._save_chart_to_bytes()
    
    def _create_empty_chart(self, message: str) -> bytes:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—É—Å—Ç–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º"""
        fig, ax = plt.subplots(figsize=(8, 6))
        ax.text(0.5, 0.5, message, ha='center', va='center', 
               transform=ax.transAxes, fontsize=14, fontweight='bold')
        ax.set_xlim(0, 1)
        ax.set_ylim(0, 1)
        ax.axis('off')
        
        return self._save_chart_to_bytes()
    
    def _save_chart_to_bytes(self) -> bytes:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ –±–∞–π—Ç—ã"""
        buffer = io.BytesIO()
        plt.savefig(buffer, format='png', dpi=300, bbox_inches='tight')
        buffer.seek(0)
        plt.close()
        return buffer.getvalue() 